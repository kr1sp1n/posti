// Generated by CoffeeScript 1.7.1
(function() {
  var EventEmitter, Imap, Mailbox, Table, argv, charm, cycle, getTable, isDown, isEnter, isExit, isUp, m, messages, moment, options, render, unseen, width, writeList, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  charm = require('charm')();

  Table = require('cli-table');

  moment = require('moment');

  _ = require('underscore');

  argv = require('minimist')(process.argv.slice(2));

  EventEmitter = require('events').EventEmitter;

  Imap = require('imap');

  charm.pipe(process.stdout);

  charm.cursor(false);

  charm.reset();

  getTable = function(width) {
    var c, table;
    c = width / 10;
    table = new Table({
      head: ['FROM', 'SUBJECT', 'WHEN'],
      colWidths: [c * 2, c * 6, c * 2],
      style: {
        'padding-left': 0,
        'padding-right': 0,
        'head': ['cyan'],
        'compact': true
      },
      chars: {
        'top': '',
        'top-mid': '',
        'top-left': '',
        'top-right': '',
        'bottom': '',
        'bottom-mid': '',
        'bottom-left': '',
        'bottom-right': '',
        'left': '',
        'left-mid': '',
        'mid': '',
        'mid-mid': '',
        'right': '',
        'right-mid': '',
        'middle': ' '
      }
    });
    return table;
  };

  Mailbox = (function(_super) {
    __extends(Mailbox, _super);

    function Mailbox(opts) {
      var _base, _base1, _base2;
      this.opts = opts != null ? opts : {};
      this.parseInput = __bind(this.parseInput, this);
      if ((_base = this.opts).name == null) {
        _base.name = 'INBOX';
      }
      if ((_base1 = this.opts).port == null) {
        _base1.port = 993;
      }
      if ((_base2 = this.opts).tls == null) {
        _base2.tls = true;
      }
      this.connection = new Imap({
        user: this.opts.user,
        password: this.opts.password,
        host: this.opts.host,
        port: this.opts.port,
        tls: this.opts.tls,
        tlsOptions: {
          rejectUnauthorized: false
        }
      });
      this.connection.once('ready', (function(_this) {
        return function() {
          return _this.open();
        };
      })(this));
      this.connection.on('error', function(err) {
        return console.log(err);
      });
    }

    Mailbox.prototype.connect = function() {
      return this.connection.connect();
    };

    Mailbox.prototype.open = function() {
      return this.connection.openBox(this.opts.name, true, (function(_this) {
        return function(err, box) {
          _this.info = box;
          return _this.emit('open', err, _this.info);
        };
      })(this));
    };

    Mailbox.prototype.check = function() {
      if (this.connection.state !== 'disconnected') {
        return this.connection.search(['UNSEEN'], (function(_this) {
          return function(err, uids) {
            if (err) {
              console.error(err);
            }
            if (uids.length > 0) {
              return _this.emit('unseen', uids);
            }
          };
        })(this));
      }
    };

    Mailbox.prototype.fetch = function(uids) {
      var f;
      f = this.connection.fetch(uids, {
        bodies: 'HEADER.FIELDS (FROM SUBJECT DATE)',
        struct: true
      });
      f.on('error', function(err) {
        return console.error(err);
      });
      return f.on('message', (function(_this) {
        return function(msg, seqno) {
          var attributes, bodyStream;
          attributes = null;
          bodyStream = null;
          msg.on('attributes', function(attr) {
            return attributes = attr;
          });
          msg.on('body', function(stream, info) {
            return bodyStream = stream;
          });
          return msg.on('end', function() {
            var buffer;
            buffer = '';
            bodyStream.on('data', function(chunk) {
              return buffer += chunk.toString('utf8');
            });
            return bodyStream.once('end', function() {
              var item;
              item = Imap.parseHeader(buffer);
              item.attributes = attributes;
              return _this.emit('message', item);
            });
          });
        };
      })(this));
    };

    Mailbox.prototype.parseInput = function(buf) {
      var codes;
      codes = [].join.call(buf, '.');
      if (isExit(codes)) {
        return this.emit('exit');
      }
    };

    return Mailbox;

  })(EventEmitter);


  /*
      if isUp(codes) and @selectedRow > 1
        @selectedRow = @selectedRow - 1
  
      if isDown(codes) and @selectedRow < mailBoxes['INBOX'].table.length
        @selectedRow = @selectedRow + 1
   */

  options = {};

  options.user = argv.u;

  options.password = argv.p;

  options.host = argv.h;

  options.port = argv.P;

  options.name = argv.b;

  width = argv.width || 80;

  m = new Mailbox(options);

  unseen = [];

  messages = [];

  m.on('open', function(err, box) {
    m.check();
    return charm.position(0, 0).write(box.name);
  });

  m.on('select', function(selectedRow) {});

  m.on('unseen', function(uids) {
    var diff;
    diff = _.difference(uids, unseen);
    unseen = _.union(unseen, uids);
    if (diff.length > 0) {
      return m.fetch(diff);
    }
  });

  m.on('exit', function() {
    process.stdin.setRawMode(false);
    charm.cursor(true);
    charm.reset();
    return process.exit();
  });

  m.on('message', function(m) {
    messages.push(m);
    return render();
  });

  m.connect();

  render = function() {
    var t;
    t = getTable(width);
    messages = _(messages).sortBy(function(m) {
      return new Date(m.date[0]);
    });
    messages.forEach(function(m) {
      var date, from, re;
      date = moment(new Date(m.date[0])).fromNow();
      re = /"/gi;
      from = m.from[0].split('<')[0].replace(re, '');
      return t.push([from, m.subject[0], date]);
    });
    return charm.position(0, 3).write(t.toString());
  };

  cycle = setInterval(function() {
    return m.check();
  }, 5000);

  process.stdin.on('data', m.parseInput);

  process.stdin.setRawMode(true);

  process.stdin.resume();

  charm.on('^C', function() {
    charm.cursor(true);
    return process.exit;
  });

  isExit = function(codes) {
    return codes === '3' || codes === '113';
  };

  isUp = function(codes) {
    return codes === '27.91.65' || codes === '107';
  };

  isDown = function(codes) {
    return codes === '27.91.66' || codes === '106';
  };

  isEnter = function(codes) {
    return codes === '13';
  };

  writeList = function(x, y, list, selected) {
    var index, line, row, rows, _i, _len, _results;
    if (selected == null) {
      selected = 1;
    }
    rows = list.toString().split('\n');
    line = y;
    _results = [];
    for (index = _i = 0, _len = rows.length; _i < _len; index = ++_i) {
      row = rows[index];
      charm.position(x, line++);
      if (index === selected) {
        charm.display('underscore');
      } else {
        charm.display('reset');
      }
      _results.push(charm.write(row));
    }
    return _results;
  };

  module.exports = {
    run: function() {}
  };

}).call(this);
